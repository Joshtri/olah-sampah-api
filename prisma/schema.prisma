generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


enum role {
  admin
  pengepul
}

model Pengguna {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  nama        String
  email       String   @unique
  kataSandi   String
  peran       role   // Contoh: "admin", "staf"
  dibuatPada  DateTime @default(now())
  diperbaruiPada DateTime @updatedAt
  
}

model Anggota {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  nama        String
  email       String     @unique
  kataSandi   String
  noTelepon   String
  alamat      String
  transaksi   Transaksi[] // Relasi ke Transaksi
  dibuatPada  DateTime   @default(now())
  diperbaruiPada DateTime @updatedAt
}


model Pengepul {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  nama            String
  email           String     @unique
  kataSandi       String
  noTelepon       String
  alamat          String
  lokasi          String?     // Lokasi pengepul, misalnya nama kecamatan
  // bankSampahId    String?     // Relasi ke Bank Sampah jika ada
  namaBankSampah String?
  deskripsiBankSampah String
  lokasiUrl       String?
  dokumenPrasyarat String?
  thumbnailPengapul String?
  provinsi        String
  kabupaten       String
  kecamatan       String
  kelurahan       String
  status          Status     @default(PENDING)  // Status registrasi dari admin
  itemSampah          ItemSampah[] // Relasi ke ItemSampah, setiap pengepul memiliki item sampah tersendiri

  dibuatPada      DateTime    @default(now())
  diperbaruiPada  DateTime    @updatedAt
}


enum Status {
  PENDING   // Registrasi sedang menunggu persetujuan admin
  DITERIMA  // Registrasi telah disetujui oleh admin
  DITOLAK   // Registrasi ditolak oleh admin
}


model KategoriSampah {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  nama        String
  deskripsi   String?
  itemSampah  ItemSampah[] // Relasi ke ItemSampah
}

model ItemSampah {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  nama             String
  hargaPerKg       Float           // Harga per kg
  pengepulId       String          @db.ObjectId // ID relasi ke Pengepul
  pengepul         Pengepul        @relation(fields: [pengepulId], references: [id])
  kategoriSampah   KategoriSampah? @relation(fields: [kategoriSampahId], references: [id])
  kategoriSampahId String?         @db.ObjectId // ID relasi ke KategoriSampah
  itemTransaksi    ItemTransaksi[] // Relasi balik ke ItemTransaksi
}

// model Transaksi {
//   id               String     @id @default(auto()) @map("_id") @db.ObjectId
//   anggotaId        String     @db.ObjectId  // ID Anggota
//   tanggalTransaksi DateTime  @default(now()) 
//   itemTransaksi    Json       // Array of items { "itemId": string, "nama": string, "kuantitas": float, "hargaPerKg": float, "totalHarga": float }
//   totalHarga       Float      // Total Harga dari seluruh transaksi
//   anggota          Anggota?   @relation(fields: [anggotaId], references: [id]) // Relasi balik ke Anggota
// }

enum StatusTransaksi {
  pending  // Default status, transaksi belum diproses
  success  // Transaksi berhasil
  failed   // Transaksi gagal
  cancelled // Transaksi dibatalkan
}

model ItemTransaksi {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  transaksiId    String     @db.ObjectId  // ID relasi ke Transaksi
  itemSampahId   String     @db.ObjectId  // ID relasi ke ItemSampah
  kuantitas      Float
  totalHarga     Float
  itemSampah     ItemSampah @relation(fields: [itemSampahId], references: [id])
  transaksi      Transaksi @relation(fields: [transaksiId], references: [id])
}

model Transaksi {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  anggotaId        String         @db.ObjectId  // ID Anggota
  tanggalTransaksi DateTime      @default(now()) 
  totalTransaksi   Float
  itemTransaksi    ItemTransaksi[]  // Relasi ke ItemTransaksi
  statusTransaksi  StatusTransaksi @default(pending)  // Status transaksi
  anggota          Anggota?       @relation(fields: [anggotaId], references: [id])
}



